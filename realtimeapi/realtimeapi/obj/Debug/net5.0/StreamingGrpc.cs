// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/streaming.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace realtimeapi.Protos {
  public static partial class streaming
  {
    static readonly string __ServiceName = "streaming";

    static readonly grpc::Marshaller<global::realtimeapi.Protos.streamrequest> __Marshaller_streamrequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::realtimeapi.Protos.streamrequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::realtimeapi.Protos.streamresponse> __Marshaller_streamresponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::realtimeapi.Protos.streamresponse.Parser.ParseFrom);

    static readonly grpc::Method<global::realtimeapi.Protos.streamrequest, global::realtimeapi.Protos.streamresponse> __Method_StreamingFromServer = new grpc::Method<global::realtimeapi.Protos.streamrequest, global::realtimeapi.Protos.streamresponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamingFromServer",
        __Marshaller_streamrequest,
        __Marshaller_streamresponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::realtimeapi.Protos.StreamingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of streaming</summary>
    [grpc::BindServiceMethod(typeof(streaming), "BindService")]
    public abstract partial class streamingBase
    {
      /// <summary>
      /// Server streaming
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamingFromServer(global::realtimeapi.Protos.streamrequest request, grpc::IServerStreamWriter<global::realtimeapi.Protos.streamresponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(streamingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamingFromServer, serviceImpl.StreamingFromServer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, streamingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamingFromServer, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::realtimeapi.Protos.streamrequest, global::realtimeapi.Protos.streamresponse>(serviceImpl.StreamingFromServer));
    }

  }
}
#endregion
